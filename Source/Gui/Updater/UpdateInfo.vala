// This file is generated by kxml_compiler from occinfo.xml.

// #include <string>
// #include <QDomElement>
// #include <QXmlStreamWriter>

namespace Occ {

class UpdateInfo {
public:
    void setVersion (string &v);
    string version ();
    void setVersionString (string &v);
    string versionString ();
    void setWeb (string &v);
    string web ();
    void setDownloadUrl (string &v);
    string downloadUrl ();
    /***********************************************************
      Parse XML object from DOM element.
    ***********************************************************/
    static UpdateInfo parseElement (QDomElement &element, bool *ok);
    static UpdateInfo parseString (string &xml, bool *ok);

private:
    string mVersion;
    string mVersionString;
    string mWeb;
    string mDownloadUrl;
};

} // namespace Occ









// This file is generated by kxml_compiler from occinfo.xml.

// #include <QtDebug>
// #include <QFile>
// #include <QDomDocument>
// #include <QtCore/QtDebug>
// #include <QtCore/QFile>

namespace Occ {

    void UpdateInfo.setVersion (string &v) {
        mVersion = v;
    }
    
    string UpdateInfo.version () {
        return mVersion;
    }
    
    void UpdateInfo.setVersionString (string &v) {
        mVersionString = v;
    }
    
    string UpdateInfo.versionString () {
        return mVersionString;
    }
    
    void UpdateInfo.setWeb (string &v) {
        mWeb = v;
    }
    
    string UpdateInfo.web () {
        return mWeb;
    }
    
    void UpdateInfo.setDownloadUrl (string &v) {
        mDownloadUrl = v;
    }
    
    string UpdateInfo.downloadUrl () {
        return mDownloadUrl;
    }
    
    UpdateInfo UpdateInfo.parseElement (QDomElement &element, bool *ok) {
        if (element.tagName () != QLatin1String ("owncloudclient")) {
            qCCritical (lcUpdater) << "Expected 'owncloudclient', got '" << element.tagName () << "'.";
            if (ok)
                *ok = false;
            return UpdateInfo ();
        }
    
        UpdateInfo result = UpdateInfo ();
    
        QDomNode n;
        for (n = element.firstChild (); !n.isNull (); n = n.nextSibling ()) {
            QDomElement e = n.toElement ();
            if (e.tagName () == QLatin1String ("version")) {
                result.setVersion (e.text ());
            } else if (e.tagName () == QLatin1String ("versionstring")) {
                result.setVersionString (e.text ());
            } else if (e.tagName () == QLatin1String ("web")) {
                result.setWeb (e.text ());
            } else if (e.tagName () == QLatin1String ("downloadurl")) {
                result.setDownloadUrl (e.text ());
            }
        }
    
        if (ok)
            *ok = true;
        return result;
    }
    
    UpdateInfo UpdateInfo.parseString (string &xml, bool *ok) {
        string errorMsg;
        int errorLine = 0, errorCol = 0;
        QDomDocument doc;
        if (!doc.setContent (xml, false, &errorMsg, &errorLine, &errorCol)) {
            qCWarning (lcUpdater).noquote ().nospace () << errorMsg << " at " << errorLine << "," << errorCol
                                    << "\n" <<  xml.splitRef ("\n").value (errorLine-1) << "\n"
                                    << string (" ").repeated (errorCol - 1) << "^\n"
                                    << "." << xml << "<-";
            if (ok)
                *ok = false;
            return UpdateInfo ();
        }
    
        bool documentOk = false;
        UpdateInfo c = parseElement (doc.documentElement (), &documentOk);
        if (ok) {
            *ok = documentOk;
        }
        return c;
    }
    
    } // namespace Occ
    